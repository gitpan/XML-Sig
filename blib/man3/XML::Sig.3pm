.\" Automatically generated by Pod::Man 2.16 (Pod::Simple 3.05)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "XML::Sig 3"
.TH XML::Sig 3 "2009-11-10" "perl v5.10.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
XML::Sig \- A toolkit to help sign and verify XML Digital Signatures.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This perl module provides two primary capabilities: given an \s-1XML\s0 string, create
and insert a digital signature, or if one is already present in the string verify 
it \*(-- all in accordance with the W3C standard governing \s-1XML\s0 signatures.
.SH "ABOUT DIGITAL SIGNATURES"
.IX Header "ABOUT DIGITAL SIGNATURES"
Just as one might want to send an email message that is cryptographically signed
in order to give the recipient the means to independently verify who sent the email,
one might also want to sign an \s-1XML\s0 document. This is especially true in the 
scenario where an \s-1XML\s0 document is received in an otherwise unauthenticated 
context, e.g. \s-1SAML\s0.
.PP
However \s-1XML\s0 provides a challenge that email does not. In \s-1XML\s0, two documents can be 
byte-wise inequivalent, and semanticaly equivalent at the same time. For example:
.PP
.Vb 4
\&    <?xml version="1.0"?>
\&    <foo>
\&      <bar />
\&    </foo>
\&
\&    And:
\&
\&    <?xml version="1.0"?>
\&    <foo>
\&      <bar></bar>
\&    </foo>
.Ve
.PP
Each of these document express the same thing, or in other words they \*(L"mean\*(R"
the same thing. However if you were to strictly sign the raw text of these 
documents, they would each produce different signatures.
.PP
\&\s-1XML\s0 Signatures on the other hand will produce the same signature for each of 
the documents above. Therefore an \s-1XML\s0 document can be written and rewritten by 
different parties and still be able to have someone at the end of the line 
verify a signature the document may contain.
.PP
There is a specially subscribed methodology for how this process should be
executed and involves transforming the \s-1XML\s0 into its canonical form so a 
signature can be reliably inserted or extracted for verification. This
module implements that process.
.Sh "\s-1EXAMPLE\s0 \s-1SIGNATURE\s0"
.IX Subsection "EXAMPLE SIGNATURE"
Below is a sample \s-1XML\s0 signature to give you some sense of what they look like.
First let's look at the original \s-1XML\s0 document, prior to being signed:
.PP
.Vb 4
\&  <?xml version="1.0"?>
\&  <foo ID="abc">
\&    <bar>123</bar>
\&  </foo>
.Ve
.PP
Now, let's insert a signature:
.PP
.Vb 10
\&  <?xml version="1.0"?>
\&  <foo ID="abc">
\&    <bar>123</bar>
\&    <Signature xmlns="http://www.w3.org/2000/09/xmldsig#">
\&      <SignedInfo xmlns="http://www.w3.org/2000/09/xmldsig#" xmlns:samlp="urn:oasis:names:tc:SAML:2.0:protocol" xmlns:xenc="http://www.w3.org/2001/04/xmlenc#">
\&        <CanonicalizationMethod Algorithm="http://www.w3.org/TR/2001/REC\-xml\-c14n\-20010315#WithComments" />
\&        <SignatureMethod Algorithm="http://www.w3.org/2000/09/xmldsig#rsa\-sha1" />
\&        <Reference URI="#abc">
\&          <Transforms>
\&            <Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped\-signature" />
\&          </Transforms>
\&          <DigestMethod Algorithm="http://www.w3.org/2000/09/xmldsig#sha1" />
\&          <DigestValue>9kpmrvv3peVJpNSTRycrV+jeHVY=</DigestValue>
\&        </Reference>
\&      </SignedInfo>
\&      <SignatureValue>
\&        HXUBnMgPJf//j4ihaWnaylNwAR5AzDFY83HljFIlLmTqX1w1C72ZTuRObvYve8TNEbVsQlTQkj4R
\&        hiY0pgIMQUb75GLYFtc+f0YmBZf5rCWY3NWzo432D3ogAvpEzYXEQPmicWe2QozQhybaz9/wrYki
\&        XiXY+57fqCkf7aT8Bb6G+fn7Aj8gnZFLkmKxwCdyGsIZOIZdQ8MWpeQrifxBR0d8W1Zm6ix21WNv
\&        ONt575h7VxLKw8BDhNPS0p8CS3hOnSk29stpiDMCHFPxAwrbKVL1kGDLaLZn1q8nNRmH8oFxG15l
\&        UmS3JXDZAss8gZhU7g9T4XllCqjrAvzPLOFdeQ==
\&      </SignatureValue>
\&      <KeyInfo>
\&        <KeyValue>
\&          <RSAKeyValue>
\&            <Modulus>
\&              1b+m37u3Xyawh2ArV8txLei251p03CXbkVuWaJu9C8eHy1pu87bcthi+T5WdlCPKD7KGtkKn9vq
\&              i4BJBZcG/Y10e8KWVlXDLg9gibN5hb0Agae3i1cCJTqqnQ0Ka8w1XABtbxTimS1B0aO1zYW6d+U
\&              Yl0xIeAOPsGMfWeu1NgLChZQton1/NrJsKwzMaQy1VI8m4gUleit9Z8mbz9bNMshdgYEZ9oC4bH
\&              n/SnA4FvQl1fjWyTpzL/aWF/bEzS6Qd8IBk7yhcWRJAGdXTWtwiX4mXb4h/2sdrSNvyOsd/shCf
\&              OSMsf0TX+OdlbH079AsxOwoUjlzjuKdCiFPdU6yAJw==
\&            </Modulus>
\&            <Exponent>Iw==</Exponent>
\&          </RSAKeyValue>
\&        </KeyValue>
\&      </KeyInfo>
\&    </Signature>
\&  </foo>
.Ve
.SH "PREREQUISITES"
.IX Header "PREREQUISITES"
.IP "Digest::SHA1" 4
.IX Item "Digest::SHA1"
.PD 0
.IP "XML::XPath" 4
.IX Item "XML::XPath"
.IP "MIME::Base64" 4
.IX Item "MIME::Base64"
.IP "Crypt::OpenSSL::X509" 4
.IX Item "Crypt::OpenSSL::X509"
.IP "Crypt::OpenSSL::RSA" 4
.IX Item "Crypt::OpenSSL::RSA"
.PD
.SH "USAGE"
.IX Header "USAGE"
.Sh "\s-1SUPPORTED\s0 \s-1ALGORITHMS\s0 & \s-1TRANSFORMS\s0"
.IX Subsection "SUPPORTED ALGORITHMS & TRANSFORMS"
This module supports the following signature methods:
.IP "\s-1DSA\s0" 4
.IX Item "DSA"
.PD 0
.IP "\s-1RSA\s0" 4
.IX Item "RSA"
.IP "\s-1RSA\s0 encoded as x509" 4
.IX Item "RSA encoded as x509"
.RS 4
.IP "EXC\-X14N#" 4
.IX Item "EXC-X14N#"
.IP "EXC\-X14#WithComments" 4
.IX Item "EXC-X14#WithComments"
.IP "Enveloped Signature" 4
.IX Item "Enveloped Signature"
.RE
.RS 4
.RE
.PD
.Sh "\s-1METHODS\s0"
.IX Subsection "METHODS"
.IP "\fBsign($xml)\fR" 4
.IX Item "sign($xml)"
When given a string of \s-1XML\s0, it will return the same string with a signature
generated from the key provided when the XML::Sig object was initialized.
.Sp
This method presumes that there is one and only one element in your \s-1XML\s0
document with an \s-1ID\s0 (case sensitive) attribute. This is the element that will
be the basis for the signature. It will also correspond to the \s-1URI\s0 attribute
in the Reference element that will be contained by the signature. If no \s-1ID\s0
attribute can be found on an element, the signature will not be created.
.IP "\fBverify($xml)\fR" 4
.IX Item "verify($xml)"
Returns true or false based upon whether the signature is valid or not.
.Sp
When using XML::Sig exclusively to verify a signature, no key needs to be
specified during initialization given that the public key should be
transmitted with the signature.
.Sh "\s-1OPTIONS\s0"
.IX Subsection "OPTIONS"
Each of the following options are also accessors on the main
File::Download object.
.IP "\fBkey\fR" 4
.IX Item "key"
The path to a file containing the contents of a private key. This option
is used only when generating signatures.
.IP "\fBcanonicalizer\fR" 4
.IX Item "canonicalizer"
The \s-1XML\s0 canonicalization library to use. Options currently are:
.RS 4
.IP "XML::CanonicalizerXML (default)" 4
.IX Item "XML::CanonicalizerXML (default)"
.PD 0
.IP "XML::Canonicalizer" 4
.IX Item "XML::Canonicalizer"
.IP "\fBx509\fR" 4
.IX Item "x509"
.PD
Takes a true (1) or false (0) value and indicates how you want the 
signature to be encoded. When true, an X509 certificate will be 
encoded in the signature. Otherwise the native encoding format for
\&\s-1RSA\s0 and \s-1DSA\s0 will be used.
.RE
.RS 4
.RE
.SH "EXAMPLE"
.IX Header "EXAMPLE"
Fetch the newest and greatest perl version:
.PP
.Vb 10
\&   my $xml = \*(Aq<foo ID="abc">123</foo>\*(Aq;
\&   my $signer = XML::Sig\->new({
\&     canonicalizer => \*(AqXML\-CanonizeXML\*(Aq,
\&     key => \*(Aqpath/to/private.key\*(Aq,
\&   });
\&   my $signed = $signer\->sign($xml);
\&   print "Signed XML: $signed\en";
\&   $signer\->verify($signed) 
\&     or die "Signature Invalid.";
\&   print "Signature valid.\en";
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
<http://www.w3.org/TR/xmldsig\-core/>
.SH "AUTHORS and CREDITS"
.IX Header "AUTHORS and CREDITS"
Author: Byrne Reese <byrne@majordojo.com>
.PP
Thanks to Manni Heumann who wrote Google::SAML::Response from 
which this module borrows heavily in order to create digital 
signatures.
.SH "POD ERRORS"
.IX Header "POD ERRORS"
Hey! \fBThe above document had some coding errors, which are explained below:\fR
.IP "Around line 576:" 4
.IX Item "Around line 576:"
You forgot a '=back' before '=head1'
.IP "Around line 604:" 4
.IX Item "Around line 604:"
You forgot a '=back' before '=head2'
.Sp
You forgot a '=back' before '=head2'
.IP "Around line 629:" 4
.IX Item "Around line 629:"
You forgot a '=back' before '=head2'
.IP "Around line 662:" 4
.IX Item "Around line 662:"
You forgot a '=back' before '=head1'
.Sp
You forgot a '=back' before '=head1'
